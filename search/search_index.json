{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Creaci\u00f3n de un contenedor en Go Nuestro objetivo es que, al acabar este tutorial, tengamos un programa que sea capaz de crear un proceso y aislarlo con namespaces y cgroups . De hecho, intentaremos que la interacci\u00f3n con \u00e9ste sea muy parecida a la que tendr\u00edamos cuando ejecutamos un contenedor Docker: # Nosotros vamos a ejecutarlo as\u00ed: root@bar:~$ go run contenedor.go run <command> <args> # Una ejecuci\u00f3n en Docker ser\u00eda algo de este estilo: root@bar:~$ docker run <image> <command> <args> Cabe destacar que es necesario que todos los ficheros est\u00e9n en una carpeta cuyo grupo y usuario pertenezcan a root , as\u00ed como realizar todos los comandos con privilegios de root. Paso 1: Creaci\u00f3n del c\u00f3digo base El primer paso consiste en escribir las primeras dos funciones: main , que simplemente comprobar\u00e1 que se ha ejecutado el comando correcto en terminal y run , que imprimir\u00e1 en pantalla los datos del proceso y ejecutar\u00e1 otro nuevo. C\u00f3digo en Go necesario package main import ( \"fmt\" \"os\" \"os/exec\" ) func main() { switch os.Args[1] { case \"run\": run() default: panic(\"\u00bfArgumento Invalido?\") } } func run() { fmt.Printf(\"Corriendo '%v' con User ID %d en PID %d \\n\", os.Args[2:], os.Getuid(), os.Getpid()) cmd := exec.Command(os.Args[2], os.Args[3:]...) cmd.Stdin = os.Stdin cmd.Stdout = os.Stdout cmd.Stderr = os.Stderr cmd.Run() } Ahora puedes probar a ejecutar la instrucci\u00f3n go run contenedor.go run ps a y comprobar que se existen dos procesos: el contenedor.go y el ps a que le hemos indicado que ejecute dentro del \"pre-contenedor\". Explicaci\u00f3n >La funci\u00f3n `run` simplemente imprime por pantalla informaci\u00f3n \u00fatil sobre el proceso que estamos ejecutando y que, m\u00e1s adelante, crear\u00e1 el contenedor. De momento, lo \u00fanico que estamos haciendo es indicarle que queremos ejecutar un comando con la funci\u00f3n `Command` del paquete [`exec`](https://golang.org/pkg/os/exec/) indic\u00e1ndole los argumentos. Este comando devuelve una estructura del tipo `Cmd` en la que tenemos que especificarle el _Stdin_ _Stdout_ y _Stderr_. >Tambi\u00e9n podemos ejecutar otros comandos dentro del contenedor, como `go run contenedor.go run /bin/bash`, en cuyo caso se abrir\u00e1 una nueva terminal.","title":"Tutorial"},{"location":"#creacion-de-un-contenedor-en-go","text":"Nuestro objetivo es que, al acabar este tutorial, tengamos un programa que sea capaz de crear un proceso y aislarlo con namespaces y cgroups . De hecho, intentaremos que la interacci\u00f3n con \u00e9ste sea muy parecida a la que tendr\u00edamos cuando ejecutamos un contenedor Docker: # Nosotros vamos a ejecutarlo as\u00ed: root@bar:~$ go run contenedor.go run <command> <args> # Una ejecuci\u00f3n en Docker ser\u00eda algo de este estilo: root@bar:~$ docker run <image> <command> <args> Cabe destacar que es necesario que todos los ficheros est\u00e9n en una carpeta cuyo grupo y usuario pertenezcan a root , as\u00ed como realizar todos los comandos con privilegios de root.","title":"Creaci\u00f3n de un contenedor en Go"},{"location":"#paso-1-creacion-del-codigo-base","text":"El primer paso consiste en escribir las primeras dos funciones: main , que simplemente comprobar\u00e1 que se ha ejecutado el comando correcto en terminal y run , que imprimir\u00e1 en pantalla los datos del proceso y ejecutar\u00e1 otro nuevo. C\u00f3digo en Go necesario package main import ( \"fmt\" \"os\" \"os/exec\" ) func main() { switch os.Args[1] { case \"run\": run() default: panic(\"\u00bfArgumento Invalido?\") } } func run() { fmt.Printf(\"Corriendo '%v' con User ID %d en PID %d \\n\", os.Args[2:], os.Getuid(), os.Getpid()) cmd := exec.Command(os.Args[2], os.Args[3:]...) cmd.Stdin = os.Stdin cmd.Stdout = os.Stdout cmd.Stderr = os.Stderr cmd.Run() } Ahora puedes probar a ejecutar la instrucci\u00f3n go run contenedor.go run ps a y comprobar que se existen dos procesos: el contenedor.go y el ps a que le hemos indicado que ejecute dentro del \"pre-contenedor\". Explicaci\u00f3n >La funci\u00f3n `run` simplemente imprime por pantalla informaci\u00f3n \u00fatil sobre el proceso que estamos ejecutando y que, m\u00e1s adelante, crear\u00e1 el contenedor. De momento, lo \u00fanico que estamos haciendo es indicarle que queremos ejecutar un comando con la funci\u00f3n `Command` del paquete [`exec`](https://golang.org/pkg/os/exec/) indic\u00e1ndole los argumentos. Este comando devuelve una estructura del tipo `Cmd` en la que tenemos que especificarle el _Stdin_ _Stdout_ y _Stderr_. >Tambi\u00e9n podemos ejecutar otros comandos dentro del contenedor, como `go run contenedor.go run /bin/bash`, en cuyo caso se abrir\u00e1 una nueva terminal.","title":"Paso 1: Creaci\u00f3n del c\u00f3digo base"},{"location":"prueba/","text":"Esto es una prueba esto es una prueba","title":"Prueba"},{"location":"prueba/#esto-es-una-prueba","text":"esto es una prueba","title":"Esto es una prueba"}]}